name: MFWPH Resource Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout MFWPH repository
        uses: actions/checkout@v4
        with:
          repository: TanyaShue/MFWPH
          path: MFWPH

      - name: Checkout target resource repository
        uses: actions/checkout@v4
        with:
          repository: TanyaShue/MaaYYs
          path: target-resource

      - name: Prepare resource directory
        shell: pwsh
        run: |
          # 确保目录存在，并清空
          New-Item -Path "MFWPH\assets\resource\MaaYYs" -ItemType Directory -Force
          Get-ChildItem -Path "MFWPH\assets\resource\MaaYYs" | Remove-Item -Recurse -Force

      - name: Copy resources to MFWPH repository
        shell: pwsh
        run: |
          # 复制目标资源仓库的内容到 resource/MaaYYs 目录
          Copy-Item -Path "target-resource\*" -Destination "MFWPH\assets\resource\MaaYYs" -Recurse -Force

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: MFWPH
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Copy DLL files to Python root
        shell: pwsh
        run: |
          if (Test-Path -Path "${{ github.workspace }}\MFWPH\DLL") {
            $dllFiles = Get-ChildItem -Path "${{ github.workspace }}\MFWPH\DLL" -File
            foreach ($file in $dllFiles) {
              Copy-Item -Path $file.FullName -Destination "${{ env.pythonLocation }}\$($file.Name)" -Force
              Write-Host "Copied $($file.Name) to ${{ env.pythonLocation }}"
            }
          } else {
            Write-Host "DLL folder not found."
          }

      - name: Run build script for complete package
        working-directory: MFWPH
        shell: pwsh
        run: |
          python build.py
          $zipFile = Get-ChildItem -Path "./dist" -Filter "MAA_YYS_*.zip" | Select-Object -First 1
          if ($zipFile) {
            Copy-Item -Path $zipFile.FullName -Destination "./dist/MAA_YYS_FULL.zip" -Force
            Write-Host "Copied $($zipFile.Name) to MAA_YYS_FULL.zip"
          } else {
            Write-Host "::error::Build failed - zip file was not created"
            exit 1
          }

      - name: Create resources-only package
        shell: pwsh
        run: |
          # 创建临时目录
          New-Item -Path "${{ github.workspace }}\resources-only" -ItemType Directory -Force
          
          # 复制资源仓库内容到临时目录
          Copy-Item -Path "target-resource\*" -Destination "${{ github.workspace }}\resources-only" -Recurse -Force
          
          # 创建仅包含资源的ZIP文件
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory("${{ github.workspace }}\resources-only", "${{ github.workspace }}\MFWPH\dist\MAA_YYS_RESOURCES_ONLY.zip")
          
          Write-Host "Created resources-only package: MAA_YYS_RESOURCES_ONLY.zip"

      - name: List files in dist directory
        working-directory: MFWPH
        shell: pwsh
        run: |
          Write-Host "Contents of dist directory:"
          Get-ChildItem -Path ./dist -Recurse | Select-Object FullName
          Write-Host "Zip file details:"
          Get-Item -Path ./dist/MAA_YYS_FULL.zip | Select-Object FullName, Length, LastWriteTime
          Get-Item -Path ./dist/MAA_YYS_RESOURCES_ONLY.zip | Select-Object FullName, Length, LastWriteTime

      - name: Create GitHub Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          artifacts: |
            ${{ github.workspace }}\MFWPH\dist\MAA_YYS_FULL.zip
            ${{ github.workspace }}\MFWPH\dist\MAA_YYS_RESOURCES_ONLY.zip
          artifactContentType: application/zip
          artifactErrorsFailBuild: true

      - name: Trigger MirrorChyanUploading
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_release_note
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
